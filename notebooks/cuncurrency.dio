<mxGraphModel dx="1030" dy="849" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" background="#ffffff"><root><mxCell id="0"/><mxCell id="1" parent="0"/><mxCell id="7" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;html=1;jettySize=auto;orthogonalLoop=1;" edge="1" parent="1" source="5" target="6"><mxGeometry relative="1" as="geometry"/></mxCell><mxCell id="5" value="Idle" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1"><mxGeometry x="105" y="120" width="120" height="60" as="geometry"/></mxCell><mxCell id="6" value="Test" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="1"><mxGeometry x="305" y="120" width="120" height="60" as="geometry"/></mxCell><mxCell id="10" value="&lt;h1&gt;동시성의 이해&lt;/h1&gt;&lt;p&gt;전통적인 Thread 와 AsyncIO 의 동작 원리의 차이점을 알아봅시다.&lt;/p&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacing=5;spacingTop=-20;whiteSpace=wrap;overflow=hidden;rounded=0;" vertex="1" parent="1"><mxGeometry x="50" y="20" width="570" height="120" as="geometry"/></mxCell></root></mxGraphModel>